import json
import os
import argparse
from datetime import datetime

def generate_verilog_files(json_file_path="verilog_library_dump.json", output_directory="verilog_library", target_module=None):
    """
    Reads an aggregated JSON file of Verilog modules and generates either all
    modules or a specific one into individual .v files.

    Args:
        json_file_path (str): The path to the input JSON file from Make.com.
        output_directory (str): The name of the directory to save the Verilog files.
        target_module (str, optional): The specific module name to generate. 
                                       If None, all modules are generated. Defaults to None.
    """
    try:

        print(f"Reading aggregated library from: {json_file_path}")
        with open(json_file_path, 'r', encoding='utf-8') as f:

            library_data = json.load(f)
            if not isinstance(library_data, list):
                print("Error: JSON file does not contain a list (array) of modules.")
                return


        if not target_module:
            print("\nAvailable Verilog Modules:")
            for module in library_data:
                module_name = module.get('module_name', 'N/A')
                description = module.get('description', 'No description provided.')
                print(f"{module_name} - {description}")
            return


        if not os.path.exists(output_directory):
            os.makedirs(output_directory)
            print(f"Created output directory: {output_directory}")


        modules_to_generate = []
        print(f"\nSearching for specific module: '{target_module}'...")
        found = False
        for module in library_data:
            if module.get('module_name') == target_module:
                modules_to_generate.append(module)
                found = True
                break 
        if not found:
            print(f"Error: Module '{target_module}' not found in the JSON library.")

            available_modules = [m.get('module_name', 'N/A') for m in library_data]
            print("Available modules are:", ", ".join(available_modules))
            return


        print("Generating Verilog file(s)...")
        for module in modules_to_generate:
            module_name = module.get('module_name', 'unknown_module')
            description = module.get('description', 'No description provided.')
            verilog_code = module.get('verilog_code', '')

            if not verilog_code:
                print(f"  - Skipping {module_name} due to empty code.")
                continue

            file_name = f"{module_name}.v"
            file_path = os.path.join(output_directory, file_name)

            file_header = f"""// -----------------------------------------------------------------------------
// Module: {module_name}
//
// Description:
// {description}
//
// Generated by: Verilog Library Generator
// Date: {datetime.now().strftime('%Y-%m-%d')}
// -----------------------------------------------------------------------------
"""
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(file_header.strip() + "\n\n")
                f.write(verilog_code)
            
            print(f"  - Successfully created {file_path}")

        print("\nLibrary generation complete!")

    except FileNotFoundError:
        print(f"Error: The file {json_file_path} was not found.")
    except json.JSONDecodeError:
        print(f"Error: Invalid JSON format in {json_file_path}. Please ensure it's a valid JSON array.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Generate Verilog modules from an aggregated JSON library."
    )
    parser.add_argument(
        "--input",
        default="verilog_library_dump.json",
        help="Path to the input JSON file (e.g., verilog_library_dump.json)."
    )
    parser.add_argument(
        "--output",
        default="verilog_library",
        help="Name of the output directory (defaults to 'verilog_library')."
    )
    parser.add_argument(
        "--module",
        help="Optional: The name of a specific module to generate from the library."
    )

    args = parser.parse_args()


    if '-h' in args.__dict__ or '--help' in args.__dict__ or not args.module:
        try:
            with open(args.input, 'r', encoding='utf-8') as f:
                library_data = json.load(f)
                if not isinstance(library_data, list):
                    print("Error: JSON file does not contain a list (array) of modules.")
                    exit(1)
                print("\nAvailable Verilog Modules:")
                for module in library_data:
                    module_name = module.get('module_name', 'N/A')
                    description = module.get('description', 'No description provided.')
                    print(f"{module_name} - {description}")
        except FileNotFoundError:
            print(f"Error: The file {args.input} was not found.")
            exit(1)
        except json.JSONDecodeError:
            print(f"Error: Invalid JSON format in {args.input}. Please ensure it's a valid JSON array.")
            exit(1)
        except Exception as e:
            print(f"An unexpected error occurred while reading module list: {e}")
            exit(1)

        if '-h' in args.__dict__ or '--help' in args.__dict__:
            parser.print_help()
            exit(0)

    generate_verilog_files(args.input, args.output, args.module)
